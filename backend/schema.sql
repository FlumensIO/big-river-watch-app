create table
  public.records (
    id bigint generated by default as identity,
    constraint records_pkey primary key (id),
    cid uuid not null,
    constraint records_external_id_key unique (cid),
    data jsonb null default '{}'::jsonb,
    user_data jsonb null default '{}'::jsonb,
    media text[] not null,
    created_at timestamp with time zone null default now(),
    updated_at timestamp with time zone null default now(),
    deleted boolean not null default false
  ) tablespace pg_default;

-- Restrict access to uploading
CREATE POLICY "Enable insert for anon users" ON "public"."records"
AS PERMISSIVE FOR INSERT
TO authenticated, anon
WITH CHECK (true);

alter table
  records enable row level security;

-- Allow uploaded fetching record IDs
create view records_public(id, cid, updated_at) as
SELECT records.id, records.cid,
       records.updated_at
FROM records;

revoke delete, insert, references, trigger, truncate, update on records_public from anon;
revoke delete, insert, references, trigger, truncate, update on records_public from authenticated;

-- Admin's access of the records
create role "api_admin";
grant api_admin to authenticated; -- https://github.com/orgs/supabase/discussions/11799#discussioncomment-4871215

create view records_admin as
SELECT * FROM records WHERE deleted is false;

revoke select, delete, insert, references, trigger, truncate, update on records_admin from anon;
revoke select, delete, insert, references, trigger, truncate, update on records_admin from authenticated;
grant select on records_admin to api_admin;


-- Image policy
CREATE POLICY "Create new media" ON storage.objects FOR INSERT TO anon WITH CHECK (bucket_id = 'media');
CREATE POLICY "List files" ON storage.objects FOR SELECT TO anon USING (bucket_id = 'media'); -- for backups